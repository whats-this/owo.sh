#!/bin/sh
# owo uploads files and shortens links
# Copyright (C) 2019 OwO <devs@whats-th.is>, Auri <me@aurieh.me>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
set -eu
POSIXLY_CORRECT=1

VERSION="2.0.0"
USERAGENT="WhatsThisClient (https://owo.codes/whats-this/owo.sh, $VERSION)"
API_BASE="https://api.awau.moe"

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
# shellcheck disable=SC1090
[ -f "$XDG_CONFIG_HOME/owo/oworc" ] && . "$XDG_CONFIG_HOME/owo/oworc"
# shellcheck disable=SC1090
[ -f "$HOME/.oworc" ] && . "$HOME/.oworc"

# XXX VERBOSE="${OWO_VERBOSE:-}"
KEY="${OWO_KEY:-}"
ASSOCIATED="${OWO_ASSOCIATED:-}"
DOMAIN="https://${OWO_DOMAIN:-owo.whats-th.is}"
NO_BUFFER="${OWO_NO_BUFFER:-}"
FILE_TYPE=""
FILE_NAME=""

errecho() {
    >&2 echo "$@"
}

usage() {
    errecho "usage: $0 [-hvb] [-t TYPE] [-n NAME] [-u FILE] [-l URL] [FILE...]"
    errecho
    errecho " -h        show this message and exit"
    errecho " -v        show version information and exit"
    errecho " -b        don't buffer stdin to disk, default type to 'application/octet-stream'"
    errecho " -t <TYPE> override file TYPE"
    errecho " -n <NAME> override file NAME"
    errecho " -u <FILE> upload FILE"
    errecho " -l <URL>  shorten URL"
    errecho
    errecho "For more information, check owo(1)"
}

version() {
    errecho "$0 v$VERSION"
    errecho "Copyright (C) 2019 OwO <devs@whats-th.is>"
    errecho "This is free software.  You may redistribute copies of it under the terms of"
    errecho "the GNU General Public License <https://www.gnu.org/licenses/gpl.html>."
    errecho "There is NO WARRANTY, to the extent permitted by law."
}

fail() {
    errecho "owo:" "$@"
    exit 1
}

_file_mime() {
    # While implementing this function, I thought I would have no issues with
    # compatibility considering file(1) -biL is supported on:
    # Linux (Ian Darwin's file on most systems)
    # OpenBSD 6.4
    # FreeBSD 4.2 (least recent)
    # NetBSD 1.5 (least recent)
    # but, guess what, Apple *had* to do something absolutely idiotic and pull
    # in a strange version of file(1) which has -I as the --mime flag as opposed
    # to -i (like on Every Other Platform). Moral of story: macOS and everyone
    # who works on its userland should be reserved a special place in hell.
    if uname | grep -qi "darwin"; then # macOS
        file -bIL "$@"
    else
        file -biL "$@"
    fi
}

_tempdir() {
    set +u
    { [ "$TMPDIR" ] && echo "$TMPDIR"; } || \
    { [ "$TEMP" ] && TMPDIR="$TEMP" && echo "$TMPDIR"; } || \
    { [ "$TMP" ] && TMPDIR="$TMPDIR" && echo "$TMPDIR"; } || \
    { [ -d "/tmp" ] && TMPDIR="/tmp" && echo "$TMPDIR"; } || \
    { [ -d "/var/tmp" ] && TMPDIR="/var/tmp" && echo "$TMPDIR"; } || \
    { [ -d "/usr/tmp" ] && TMPDIR="/usr/tmp" && echo "$TMPDIR"; } || \
    pwd
    set -u
}

upload() {
    [ "$ASSOCIATED" ] && assoc="/associated" || assoc=""
    fp="$1"
    n="${FILE_NAME:-$(basename "$fp")}"
    if [ "$fp" = "-" ]; then
        ct="${FILE_TYPE:-application/octet-stream}"
        if ! [ "$NO_BUFFER" ]; then
            fp="$(mktemp "$(_tempdir)/owoXXXX")"
            ct="$(tee "$fp" | _file_mime -)"
        fi
    else
        ct="$(_file_mime "$1")"
    fi

    curl \
        -sSH "User-Agent: $USERAGENT" \
        -H "Authorization: $KEY" \
        -F "files[]=@$fp;type=$ct;filename=$n" \
        -XPOST "$API_BASE/upload/simple$assoc" | \
        awk -v "DOMAIN=$DOMAIN/" -F ',' '{ if ($2 == 200) { gsub("^", DOMAIN, $1); print $1; } else { print "owo: not OK status: " $2 | "1>&2 exec cat"; exit 1; } }'
}

shorten() {
    [ "$ASSOCIATED" ] && assoc="/associated" || assoc=""
    [ "$1" = "-" ] && read -r url || url="$1"
    curl \
        -ssH "User-Agent: $USERAGENT" \
        -H "Authorization: $KEY" \
        --data-urlencode "action=shorten" \
        --data-urlencode "url=$url" \
        --data-urlencode "resultUrl=$DOMAIN/" \
        -G "$API_BASE/shorten/polr"
}

while getopts :hvbt:n:u:l: OPT; do
    case "$OPT" in
        h ) usage; exit 0 ;;
        v ) version; exit 0 ;;
        b ) NO_BUFFER=1 ;;
        t ) FILE_TYPE="$OPTARG" ;;
        n ) FILE_NAME="$OPTARG" ;;
        u ) upload "$OPTARG" ;;
        l ) shorten "$OPTARG" ;;
        * ) fail "invalid option: -$OPTARG" ;;
    esac
done

shift "$((OPTIND - 1))"
[ "$@" ] && for f in "$@"; do upload "$f"; done || true

# vim:shiftwidth=4:expandtab:filetype=sh
